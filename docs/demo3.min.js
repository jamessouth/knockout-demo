class Demo3 {
  static get inputProperties() { return ['--points']; }

  static getRandomPoint(width, height) {
    return [
      Math.floor(Math.random() * (width)),
      Math.floor(Math.random() * (height)),
    ];
  }

  static getWidth() {
    return Math.floor(Math.random() * 30) + 1;
  }

  static getColor(base, range) {
    return base + Math.floor(Math.random() * range + 1);
  }

  static getTransparency() {
    return Math.floor(Math.random() * 101) / 100;
  }

  paint(ctx, { width, height }, props) { // eslint-disable-line
    const points = props.get('--points');
    const arr = [];

    for (let i = 0; i < points; i += 1) {
      const [x, y] = Demo3.getRandomPoint(width + 1, height + 1);
      arr.push([x, y]);

      // const end = Demo3.getRandomPoint(width + 1, height + 1);
      // ctx.beginPath();
      // ctx.moveTo(x, y);
      // ctx.fillStyle = 'black';
      // ctx.fillRect(x, y, 2, 2);
      // ctx.fill();

    }
    const sortedArr = arr.sort((a, b) => {
      return a[0] > b[0] ? 1 : -1;
    });

    const tri = [];

    for (let i = 0; i < sortedArr.length; i += 1) {

      tri.push(sortedArr[i]);
      if (tri.length < 3) {
        continue;
      } else {
        ctx.beginPath();
        ctx.moveTo(...tri[0]);
        ctx.lineTo(...tri[1]);
        ctx.lineTo(...tri[2]);
        ctx.fillStyle = `rgba(${Demo3.getColor(156, 100)}, ${Demo3.getColor(102, 50)}, ${Demo3.getColor(122, 100)}, 1)`;
        ctx.fill();
        tri.shift();


      }



      // ctx.fillStyle = 'black';
      // ctx.fillRect(x, y, 2, 2);
      // ctx.lineWidth = Demo3.getWidth();
      // ctx.lineCap = 'square';
      // ctx.strokeStyle = `rgba(${Demo3.getColor(16, 150)}, ${Demo3.getColor(18, 150)}, ${Demo3.getColor(12, 200)}, ${Demo3.getTransparency()})`;
      // ctx.stroke();
    }




  }
}
registerPaint('demo3', Demo3); // eslint-disable-line
